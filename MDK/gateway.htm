<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\gateway.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\gateway.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Mon Mar 21 14:38:28 2016
<BR><P>
<H3>Maximum Stack Usage =        352 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
CAN1_RX0_IRQHandler &rArr; canDispatch &rArr; proceedNODE_GUARD &rArr; send_consise_dcf &rArr; send_consise_dcf_loop &rArr; _writeNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2a]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">ADC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[12]">BusFault_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2c]">CAN1_RX0_IRQHandler</a> from can_stm32.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2d]">CAN1_RX1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2e]">CAN1_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2b]">CAN1_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[58]">CAN2_RX0_IRQHandler</a> from can_stm32.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[59]">CAN2_RX1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5a]">CAN2_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[57]">CAN2_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[67]">CRYP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6c]">CheckSDOAndContinue</a> from dcf.o(.text) referenced from dcf.o(.text)
 <LI><a href="#[f9]">ConsumerHearbeatAlarm</a> from lifegrd.o(.text) referenced 2 times from lifegrd.o(.text)
 <LI><a href="#[66]">DCMI_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[47]">DMA1_Stream7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Stream6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[15]">DebugMon_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[55]">ETH_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[56]">ETH_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1e]">EXTI0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[40]">EXTI15_10_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1f]">EXTI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[20]">EXTI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[21]">EXTI3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[22]">EXTI4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2f]">EXTI9_5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1c]">FLASH_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[71]">FReadCoils</a> from mb_pfunction.o(.text) referenced from mb_pfunction.o(.constdata)
 <LI><a href="#[72]">FReadDiscreteInputs</a> from mb_pfunction.o(.text) referenced from mb_pfunction.o(.constdata)
 <LI><a href="#[73]">FReadHoldingReg</a> from mb_pfunction.o(.text) referenced from mb_pfunction.o(.constdata)
 <LI><a href="#[74]">FReadInputReg</a> from mb_pfunction.o(.text) referenced from mb_pfunction.o(.constdata)
 <LI><a href="#[48]">FSMC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[78]">FTest</a> from mb_pfunction.o(.text) referenced from mb_pfunction.o(.constdata)
 <LI><a href="#[77]">FWriteMultipleReg</a> from mb_pfunction.o(.text) referenced from mb_pfunction.o(.constdata)
 <LI><a href="#[75]">FWriteSingleCoil</a> from mb_pfunction.o(.text) referenced from mb_pfunction.o(.constdata)
 <LI><a href="#[76]">FWriteSingleReg</a> from mb_pfunction.o(.text) referenced from mb_pfunction.o(.constdata)
 <LI><a href="#[68]">HASH_RNG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[61]">I2C3_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[60]">I2C3_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[11]">MemManage_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5b]">OTG_FS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[42]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[63]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[62]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[65]">OTG_HS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[64]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[9]">ObjDict1_scanIndexOD</a> from objdict1.o(.text) referenced 2 times from objdict1.o(.data)
 <LI><a href="#[0]">ObjDict1_valueRangeTest</a> from objdict1.o(.text) referenced 2 times from objdict1.o(.data)
 <LI><a href="#[d]">ObjDict2_scanIndexOD</a> from objdict2.o(.text) referenced 2 times from objdict2.o(.data)
 <LI><a href="#[c]">ObjDict2_valueRangeTest</a> from objdict2.o(.text) referenced 2 times from objdict2.o(.data)
 <LI><a href="#[70]">OnCOB_ID_SyncUpdate</a> from sync.o(.text) referenced from sync.o(.text)
 <LI><a href="#[6d]">OnHeartbeatProducerUpdate</a> from lifegrd.o(.text) referenced from lifegrd.o(.text)
 <LI><a href="#[f1]">OnNumberOfErrorsUpdate</a> from emcy.o(.text) referenced from emcy.o(.text)
 <LI><a href="#[6e]">PDOEventTimerAlarm</a> from pdo.o(.text) referenced from pdo.o(.text)
 <LI><a href="#[10c]">PDOInhibitTimerAlarm</a> from pdo.o(.text) referenced from pdo.o(.text)
 <LI><a href="#[19]">PVD_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[fb]">ProducerHearbeatAlarm</a> from lifegrd.o(.text) referenced from lifegrd.o(.text)
 <LI><a href="#[1d]">RCC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[41]">RTC_Alarm_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1b]">RTC_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[49]">SDIO_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6f]">SDOTimeoutAlarm</a> from sdo.o(.text) referenced 6 times from sdo.o(.text)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4b]">SPI3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[14]">SVC_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[132]">SyncAlarm</a> from sync.o(.text) referenced from sync.o(.text)
 <LI><a href="#[17]">SysTick_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6a]">SystemInit</a> from system_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[1a]">TAMP_STAMP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[30]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[33]">TIM1_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[32]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[31]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[34]">TIM2_IRQHandler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[35]">TIM3_IRQHandler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[36]">TIM4_IRQHandler</a> from timer_stm32.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4a]">TIM5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4e]">TIM6_DAC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4f]">TIM7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[43]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[46]">TIM8_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[45]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[44]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[112]">TPDO_Communication_Parameter_Callback</a> from pdo.o(.text) referenced from pdo.o(.text)
 <LI><a href="#[4c]">UART4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4d]">UART5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3d]">USART1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3e]">USART2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3f]">USART3_IRQHandler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5f]">USART6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[13]">UsageFault_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[18]">WWDG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[5]">_heartbeatError</a> from lifegrd.o(.text) referenced 4 times from objdict1.o(.data)
 <LI><a href="#[1]">_initialisation</a> from states.o(.text) referenced 4 times from objdict1.o(.data)
 <LI><a href="#[3]">_operational</a> from states.o(.text) referenced 4 times from objdict1.o(.data)
 <LI><a href="#[8]">_post_SlaveBootup</a> from lifegrd.o(.text) referenced 4 times from objdict1.o(.data)
 <LI><a href="#[7]">_post_TPDO</a> from sync.o(.text) referenced 4 times from objdict1.o(.data)
 <LI><a href="#[b]">_post_emcy</a> from emcy.o(.text) referenced 4 times from objdict1.o(.data)
 <LI><a href="#[6]">_post_sync</a> from sync.o(.text) referenced 4 times from objdict1.o(.data)
 <LI><a href="#[2]">_preOperational</a> from states.o(.text) referenced 4 times from objdict1.o(.data)
 <LI><a href="#[4]">_stopped</a> from states.o(.text) referenced 4 times from objdict1.o(.data)
 <LI><a href="#[a]">_storeODSubIndex</a> from objacces.o(.text) referenced 4 times from objdict1.o(.data)
 <LI><a href="#[69]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[134]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[79]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[133]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[135]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[136]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[137]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[138]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[139]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[81]"></a>Delay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponse
</UL>

<P><STRONG><a name="[a6]"></a>TimingDelay_Decrement</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7b]"></a>StartCountT15</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StartCountT15
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceOneChar
</UL>

<P><STRONG><a name="[7e]"></a>StartCountT35</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StartCountT35
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceOneChar
</UL>

<P><STRONG><a name="[7f]"></a>SendResponse</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendResponse &rArr; Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransfersReplyHandle
</UL>

<P><STRONG><a name="[cd]"></a>MB_GetDiscrete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDiscreteInputs
</UL>

<P><STRONG><a name="[cf]"></a>MB_GetCoils</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCoils
</UL>

<P><STRONG><a name="[d1]"></a>MB_SetCoil</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSingleCoil
</UL>

<P><STRONG><a name="[d3]"></a>MB_GetInputRegValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadInputReg
</UL>

<P><STRONG><a name="[13a]"></a>MB_SetInputRegValue</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>MB_GetRegValue_32</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MB_GetRegValue_32 &rArr; readNetworkDict &rArr; _readNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetworkDict
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadResultNetworkDict
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSDOtransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue
</UL>

<P><STRONG><a name="[89]"></a>MB_GetRegValue_16</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MB_GetRegValue_16 &rArr; readNetworkDict &rArr; _readNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetworkDict
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadResultNetworkDict
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSDOtransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue
</UL>

<P><STRONG><a name="[8a]"></a>MB_GetRegValue_8</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MB_GetRegValue_8 &rArr; readNetworkDict &rArr; _readNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetworkDict
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadResultNetworkDict
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSDOtransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue
</UL>

<P><STRONG><a name="[8b]"></a>MB_GetRegValue_bp</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MB_GetRegValue_bp &rArr; readNetworkDict &rArr; _readNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetworkDict
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadResultNetworkDict
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSDOtransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue
</UL>

<P><STRONG><a name="[8c]"></a>MB_GetRegValue</STRONG> (Thumb, 2332 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MB_GetRegValue &rArr; MB_GetRegValue_8 &rArr; readNetworkDict &rArr; _readNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetworkDict
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadResultNetworkDict
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSDOtransfer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue_bp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue_8
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue_16
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue_32
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHoldingReg
</UL>

<P><STRONG><a name="[d6]"></a>MB_SetRegValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteHoldingReg
</UL>

<P><STRONG><a name="[94]"></a>TIM_Config</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>NVIC_Config</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>main</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = main &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNodeId
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBSlaveIni
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleModbus
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[13b]"></a>Init_RxMes</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay_Decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM2_IRQHandler &rArr; T15EndHandle &rArr; Modbus_CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T15EndHandle
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM3_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T35EndHandle
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART3_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceOneChar
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_stm32f2xx.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
</UL>

<P><STRONG><a name="[95]"></a>NVIC_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[13d]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f2xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[dc]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f2xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[dd]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f2xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[db]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[140]"></a>CAN_SlaveStartBank</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>CAN_DBGFreeze</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>CAN_TTComModeCmd</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>CAN_Transmit</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, stm32f2xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>

<P><STRONG><a name="[143]"></a>CAN_TransmitStatus</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>CAN_CancelTransmit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>CAN_Receive</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f2xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canReceive_2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canReceive_1
</UL>

<P><STRONG><a name="[145]"></a>CAN_FIFORelease</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>CAN_MessagePending</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>CAN_OperatingModeRequest</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>CAN_Sleep</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>CAN_WakeUp</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>CAN_GetLastErrorCode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>CAN_GetReceiveErrorCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>CAN_GetLSBTransmitErrorCounter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[14d]"></a>CAN_GetFlagStatus</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>CAN_ClearFlag</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>CAN_GetITStatus</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, stm32f2xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>

<P><STRONG><a name="[14f]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>GPIO_DeInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32f2xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[91]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[150]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponse
</UL>

<P><STRONG><a name="[84]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponse
</UL>

<P><STRONG><a name="[156]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[159]"></a>RCC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>RCC_HSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[b5]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[15b]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>RCC_MCO1Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>RCC_MCO2Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>RCC_HCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>RCC_PCLK1Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>RCC_PCLK2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[16b]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[16f]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[171]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[172]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[b8]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[174]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>RCC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>RCC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f2xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[92]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[17d]"></a>I2S_Init</STRONG> (Thumb, 346 bytes, Stack size 36 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[180]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>SPI_TIModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>TIM_DeInit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
</UL>

<P><STRONG><a name="[96]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[192]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[193]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCountT35
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCountT15
</UL>

<P><STRONG><a name="[e7]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
</UL>

<P><STRONG><a name="[e9]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
</UL>

<P><STRONG><a name="[194]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCountT35
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCountT15
</UL>

<P><STRONG><a name="[19a]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>TIM_OC3Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>TIM_SelectOCxM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c0]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[be]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[bc]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[ba]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[1bd]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[1be]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[1c7]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[ea]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[1c9]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
</UL>

<P><STRONG><a name="[c5]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[c4]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[c6]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[c8]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[c7]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[c9]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[1cc]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>USART_DeInit</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[9b]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
</UL>

<P><STRONG><a name="[1d2]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
</UL>

<P><STRONG><a name="[1d5]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponse
</UL>

<P><STRONG><a name="[ab]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[1d8]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
</UL>

<P><STRONG><a name="[82]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponse
</UL>

<P><STRONG><a name="[ad]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>USART_GetITStatus</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>FTest</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb_pfunction.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_pfunction.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>ReadDiscreteInputs</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, mb_pfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadDiscreteInputs
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetDiscrete
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadDiscreteInputs
</UL>

<P><STRONG><a name="[ce]"></a>ReadCoils</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, mb_pfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadCoils
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetCoils
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadCoils
</UL>

<P><STRONG><a name="[d0]"></a>WriteSingleCoil</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mb_pfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteSingleCoil
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_SetCoil
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteSingleCoil
</UL>

<P><STRONG><a name="[d2]"></a>ReadInputReg</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mb_pfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadInputReg
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetInputRegValue
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadInputReg
</UL>

<P><STRONG><a name="[d4]"></a>ReadHoldingReg</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mb_pfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ReadHoldingReg &rArr; MB_GetRegValue &rArr; MB_GetRegValue_8 &rArr; readNetworkDict &rArr; _readNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadHoldingReg
</UL>

<P><STRONG><a name="[d5]"></a>WriteHoldingReg</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mb_pfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteHoldingReg
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_SetRegValue
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteMultipleReg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteSingleReg
</UL>

<P><STRONG><a name="[71]"></a>FReadCoils</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, mb_pfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FReadCoils &rArr; ReadCoils
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCoils
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_pfunction.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>FReadDiscreteInputs</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, mb_pfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FReadDiscreteInputs &rArr; ReadDiscreteInputs
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDiscreteInputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_pfunction.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>FReadHoldingReg</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mb_pfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = FReadHoldingReg &rArr; ReadHoldingReg &rArr; MB_GetRegValue &rArr; MB_GetRegValue_8 &rArr; readNetworkDict &rArr; _readNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHoldingReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_pfunction.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>FReadInputReg</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mb_pfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FReadInputReg &rArr; ReadInputReg
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadInputReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_pfunction.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>FWriteSingleCoil</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mb_pfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FWriteSingleCoil &rArr; WriteSingleCoil
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSingleCoil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_pfunction.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>FWriteSingleReg</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mb_pfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FWriteSingleReg &rArr; WriteHoldingReg
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteHoldingReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_pfunction.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>FWriteMultipleReg</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, mb_pfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FWriteMultipleReg &rArr; WriteHoldingReg
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteHoldingReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_pfunction.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>Modbus_CRC16</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mb_rtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Modbus_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T15EndHandle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransfersReplyHandle
</UL>

<P><STRONG><a name="[1e5]"></a>Waite10mS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mbcommon.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>Time10mSHandle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mbcommon.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>T15EndHandle</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, mbcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = T15EndHandle &rArr; Modbus_CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>T35EndHandle</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, mbcommon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>ReceOneChar</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mbcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReceOneChar &rArr; StartCountT35
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCountT35
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCountT15
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[1e7]"></a>PutDataInPUD</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mbcommon.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>MBSlaveIni</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mbslave.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>FunctionHandle</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mbslave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FunctionHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleModbus
</UL>

<P><STRONG><a name="[da]"></a>PackPDU2ADU</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mbslave.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleModbus
</UL>

<P><STRONG><a name="[d8]"></a>TransfersReplyHandle</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mbslave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TransfersReplyHandle &rArr; SendResponse &rArr; Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponse
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleModbus
</UL>

<P><STRONG><a name="[a5]"></a>IdleModbus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mbslave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IdleModbus &rArr; TransfersReplyHandle &rArr; SendResponse &rArr; Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransfersReplyHandle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackPDU2ADU
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>canInit</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, can_stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = canInit &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>canSend</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, can_stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNCMessage
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPDOrequest
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveSendBootUp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTnodeguard
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTstateChange
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProducerHearbeatAlarm
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEMCY
</UL>

<P><STRONG><a name="[e1]"></a>canReceive_1</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, can_stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = canReceive_1 &rArr; CAN_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>canReceive_2</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, can_stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = canReceive_2 &rArr; CAN_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
</UL>

<P><STRONG><a name="[2c]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, can_stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; canDispatch &rArr; proceedNODE_GUARD &rArr; send_consise_dcf &rArr; send_consise_dcf_loop &rArr; _writeNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canReceive_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, can_stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; canDispatch &rArr; proceedNODE_GUARD &rArr; send_consise_dcf &rArr; send_consise_dcf_loop &rArr; _writeNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canReceive_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>initTimer</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, timer_stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = initTimer &rArr; TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>setTimer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer_stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
</UL>

<P><STRONG><a name="[e8]"></a>getElapsedTime</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timer_stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
</UL>

<P><STRONG><a name="[36]"></a>TIM4_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer_stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM4_IRQHandler &rArr; TimeDispatch &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>send_consise_dcf</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = send_consise_dcf &rArr; send_consise_dcf_loop &rArr; _writeNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_consise_dcf_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
</UL>

<P><STRONG><a name="[f1]"></a>OnNumberOfErrorsUpdate</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, emcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OnNumberOfErrorsUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emcy.o(.text)
</UL>
<P><STRONG><a name="[f2]"></a>emergencyInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, emcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = emergencyInit &rArr; RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[12f]"></a>emergencyStop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emcy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[f4]"></a>sendEMCY</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, emcy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_errorRecovered
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_setError
</UL>

<P><STRONG><a name="[f5]"></a>EMCY_setError</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, emcy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEMCY
</UL>

<P><STRONG><a name="[f6]"></a>EMCY_errorRecovered</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, emcy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEMCY
</UL>

<P><STRONG><a name="[12b]"></a>proceedEMCY</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, emcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proceedEMCY
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[b]"></a>_post_emcy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emcy.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> objdict1.o(.data)
<LI> objdict2.o(.data)
</UL>
<P><STRONG><a name="[1e8]"></a>getNodeState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lifegrd.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>ConsumerHearbeatAlarm</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ConsumerHearbeatAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(.text)
</UL>
<P><STRONG><a name="[f7]"></a>proceedNODE_GUARD</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = proceedNODE_GUARD &rArr; send_consise_dcf &rArr; send_consise_dcf_loop &rArr; _writeNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_consise_dcf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[fb]"></a>ProducerHearbeatAlarm</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ProducerHearbeatAlarm &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>heartbeatInit</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = heartbeatInit &rArr; RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnHeartbeatProducerUpdate
</UL>

<P><STRONG><a name="[fd]"></a>heartbeatStop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = heartbeatStop
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnHeartbeatProducerUpdate
</UL>

<P><STRONG><a name="[6d]"></a>OnHeartbeatProducerUpdate</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OnHeartbeatProducerUpdate &rArr; heartbeatInit &rArr; RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>_heartbeatError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lifegrd.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> objdict1.o(.data)
<LI> objdict2.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>_post_SlaveBootup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lifegrd.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> objdict1.o(.data)
<LI> objdict2.o(.data)
</UL>
<P><STRONG><a name="[fe]"></a>masterSendNMTstateChange</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nmtmaster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = masterSendNMTstateChange &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
</UL>

<P><STRONG><a name="[ff]"></a>masterSendNMTnodeguard</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, nmtmaster.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterRequestNodeState
</UL>

<P><STRONG><a name="[100]"></a>masterRequestNodeState</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nmtmaster.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTnodeguard
</UL>

<P><STRONG><a name="[101]"></a>proceedNMTstateChange</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, nmtslave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNodeId
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[103]"></a>slaveSendBootUp</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nmtslave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = slaveSendBootUp &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[104]"></a>_getODentry</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, objacces.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objdictToSDOline
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>

<P><STRONG><a name="[106]"></a>_setODentry</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, objacces.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _setODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOlineToObjdict
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>

<P><STRONG><a name="[107]"></a>scanIndexOD</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, objacces.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scanIndexOD
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>

<P><STRONG><a name="[f3]"></a>RegisterSetODentryCallBack</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, objacces.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanIndexOD
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyInit
</UL>

<P><STRONG><a name="[a]"></a>_storeODSubIndex</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, objacces.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> objdict1.o(.data)
<LI> objdict2.o(.data)
</UL>
<P><STRONG><a name="[109]"></a>CopyBits</STRONG> (Thumb, 236 bytes, Stack size 52 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CopyBits
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>

<P><STRONG><a name="[108]"></a>buildPDO</STRONG> (Thumb, 242 bytes, Stack size 88 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBits
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>

<P><STRONG><a name="[10a]"></a>sendPDOrequest</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, pdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>

<P><STRONG><a name="[10c]"></a>PDOInhibitTimerAlarm</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = PDOInhibitTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(.text)
</UL>
<P><STRONG><a name="[10d]"></a>sendOnePDOevent</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInhibitTimerAlarm
</UL>

<P><STRONG><a name="[6e]"></a>PDOEventTimerAlarm</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDO_Communication_Parameter_Callback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(.text)
</UL>
<P><STRONG><a name="[10f]"></a>proceedPDO</STRONG> (Thumb, 672 bytes, Stack size 88 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = proceedPDO &rArr; PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBits
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[110]"></a>_sendPDOevent</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPDOevent
</UL>

<P><STRONG><a name="[111]"></a>sendPDOevent</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>

<P><STRONG><a name="[112]"></a>TPDO_Communication_Parameter_Callback</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = TPDO_Communication_Parameter_Callback &rArr; PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>PDOInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanIndexOD
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[114]"></a>PDOStop</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PDOStop
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[115]"></a>initSDOline</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = initSDOline &rArr; SetAlarm &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[116]"></a>resetSDOline</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = resetSDOline &rArr; initSDOline &rArr; SetAlarm &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSDOtransfer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOTimeoutAlarm
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[117]"></a>sendSDO</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDOabort
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[118]"></a>sendSDOabort</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOTimeoutAlarm
</UL>

<P><STRONG><a name="[6f]"></a>SDOTimeoutAlarm</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDOTimeoutAlarm &rArr; sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDOabort
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdo.o(.text)
</UL>
<P><STRONG><a name="[119]"></a>resetSDO</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = resetSDO &rArr; resetSDOline &rArr; initSDOline &rArr; SetAlarm &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[11a]"></a>SDOlineToObjdict</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SDOlineToObjdict &rArr; _setODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[11b]"></a>objdictToSDOline</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = objdictToSDOline &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[123]"></a>lineToSDO</STRONG> (Thumb, 176 bytes, Stack size 20 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lineToSDO
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[11f]"></a>SDOtoLine</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDOtoLine
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[11d]"></a>getSDOlineOnUse</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getSDOlineOnUse
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadResultNetworkDict
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSDOtransfer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWriteResultNetworkDict
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[11c]"></a>failedSDO</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = failedSDO &rArr; sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDOabort
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[120]"></a>getSDOfreeLine</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getSDOfreeLine
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[88]"></a>closeSDOtransfer</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = closeSDOtransfer &rArr; resetSDOline &rArr; initSDOline &rArr; SetAlarm &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue_bp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue_8
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue_16
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue_32
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSDOAndContinue
</UL>

<P><STRONG><a name="[122]"></a>getSDOlineRestBytes</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getSDOlineRestBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[121]"></a>setSDOlineRestBytes</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setSDOlineRestBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[11e]"></a>proceedSDO</STRONG> (Thumb, 5580 bytes, Stack size 96 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = proceedSDO &rArr; failedSDO &rArr; sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSDOlineRestBytes
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineRestBytes
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOfreeLine
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOtoLine
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineToSDO
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objdictToSDOline
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOlineToObjdict
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[ee]"></a>_writeNetworkDict</STRONG> (Thumb, 490 bytes, Stack size 96 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _writeNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOfreeLine
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_consise_dcf_loop
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNetworkDictCallBackAI
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNetworkDictCallBack
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNetworkDict
</UL>

<P><STRONG><a name="[124]"></a>writeNetworkDict</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[125]"></a>writeNetworkDictCallBack</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[126]"></a>writeNetworkDictCallBackAI</STRONG> (Thumb, 188 bytes, Stack size 88 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[127]"></a>_readNetworkDict</STRONG> (Thumb, 320 bytes, Stack size 72 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _readNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOfreeLine
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetworkDict
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetworkDictCallbackAI
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetworkDictCallback
</UL>

<P><STRONG><a name="[86]"></a>readNetworkDict</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = readNetworkDict &rArr; _readNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue_bp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue_8
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue_16
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue_32
</UL>

<P><STRONG><a name="[128]"></a>readNetworkDictCallback</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
</UL>

<P><STRONG><a name="[129]"></a>readNetworkDictCallbackAI</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
</UL>

<P><STRONG><a name="[87]"></a>getReadResultNetworkDict</STRONG> (Thumb, 286 bytes, Stack size 36 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = getReadResultNetworkDict &rArr; getSDOlineOnUse
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue_bp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue_8
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue_16
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_GetRegValue_32
</UL>

<P><STRONG><a name="[ef]"></a>getWriteResultNetworkDict</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getWriteResultNetworkDict &rArr; getSDOlineOnUse
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSDOAndContinue
</UL>

<P><STRONG><a name="[1e9]"></a>getState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, states.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>canDispatch</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, states.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = canDispatch &rArr; proceedNODE_GUARD &rArr; send_consise_dcf &rArr; send_consise_dcf_loop &rArr; _writeNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedEMCY
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>switchCommunicationState</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, states.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOStop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveSendBootUp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyStop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
</UL>

<P><STRONG><a name="[a4]"></a>setState</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, states.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTstateChange
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
</UL>

<P><STRONG><a name="[102]"></a>getNodeId</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, states.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
</UL>

<P><STRONG><a name="[a3]"></a>setNodeId</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, states.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
</UL>

<P><STRONG><a name="[1]"></a>_initialisation</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, states.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> objdict1.o(.data)
<LI> objdict2.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>_preOperational</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, states.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> objdict1.o(.data)
<LI> objdict2.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>_operational</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, states.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> objdict1.o(.data)
<LI> objdict2.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>_stopped</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, states.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> objdict1.o(.data)
<LI> objdict2.o(.data)
</UL>
<P><STRONG><a name="[12a]"></a>proceedSYNC</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sync.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNC
</UL>

<P><STRONG><a name="[130]"></a>sendSYNCMessage</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sync.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sendSYNCMessage &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNC
</UL>

<P><STRONG><a name="[131]"></a>sendSYNC</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sync.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = sendSYNC &rArr; proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNCMessage
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncAlarm
</UL>

<P><STRONG><a name="[132]"></a>SyncAlarm</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sync.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = SyncAlarm &rArr; sendSYNC &rArr; proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>stopSYNC</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sync.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stopSYNC &rArr; RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[12d]"></a>startSYNC</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sync.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = startSYNC &rArr; stopSYNC &rArr; RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCOB_ID_SyncUpdate
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[70]"></a>OnCOB_ID_SyncUpdate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sync.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OnCOB_ID_SyncUpdate &rArr; startSYNC &rArr; stopSYNC &rArr; RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync.o(.text)
</UL>
<P><STRONG><a name="[6]"></a>_post_sync</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sync.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> objdict1.o(.data)
<LI> objdict2.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>_post_TPDO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sync.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> objdict1.o(.data)
<LI> objdict2.o(.data)
</UL>
<P><STRONG><a name="[fa]"></a>SetAlarm</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetAlarm &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
</UL>

<P><STRONG><a name="[f8]"></a>DelAlarm</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOStop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDO_Communication_Parameter_Callback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProducerHearbeatAlarm
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
</UL>

<P><STRONG><a name="[ec]"></a>TimeDispatch</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TimeDispatch &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[0]"></a>ObjDict1_valueRangeTest</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, objdict1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objdict1.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>ObjDict1_scanIndexOD</STRONG> (Thumb, 374 bytes, Stack size 12 bytes, objdict1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ObjDict1_scanIndexOD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objdict1.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>ObjDict2_valueRangeTest</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, objdict2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objdict2.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>ObjDict2_scanIndexOD</STRONG> (Thumb, 222 bytes, Stack size 12 bytes, objdict2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ObjDict2_scanIndexOD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objdict2.o(.data)
</UL>
<P><STRONG><a name="[105]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>

<P><STRONG><a name="[1ea]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>

<P><STRONG><a name="[7a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ec]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1f0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1f1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8d]"></a>SPI_Config</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI_Config &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>USART3_Config</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART3_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>SetSysClock</STRONG> (Thumb, 190 bytes, Stack size 12 bytes, system_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b2]"></a>CheckITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[c1]"></a>TI4_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[bf]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[bd]"></a>TI2_Config</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[bb]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[ed]"></a>send_consise_dcf_loop</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, dcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = send_consise_dcf_loop &rArr; _writeNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSDOAndContinue
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_consise_dcf
</UL>

<P><STRONG><a name="[6c]"></a>CheckSDOAndContinue</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CheckSDOAndContinue &rArr; send_consise_dcf_loop &rArr; _writeNetworkDict &rArr; sendSDO &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSDOtransfer
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_consise_dcf_loop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWriteResultNetworkDict
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcf.o(.text)
</UL>
<P><STRONG><a name="[10b]"></a>sendPdo</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sendPdo &rArr; canSend &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
